current_line,next_line,occurrence_ct
from math import sqrt,from maths.greatest_common_divisor import gcd_by_iterative,1
"assert isinstance(number, int) and (number >= 0), (","""'number' must been an int and positive""",1
"""'number' must been an int and positive""",),1
if number <= 1:,status = False,1
"for divisor in range(2, int(round(sqrt(number))) + 1):",if number % divisor == 0:,1
if number % divisor == 0:,status = False,1
status = False,break,1
"assert isinstance(n, int) and (n > 2), ""'N' must been an int and > 2""","begin_list = list(range(2, n + 1))",1
"begin_list = list(range(2, n + 1))",ans = [],1
for i in range(len(begin_list)):,"for j in range(i + 1, len(begin_list)):",1
"for j in range(i + 1, len(begin_list)):",if (begin_list[i] != 0) and (begin_list[j] % begin_list[i] == 0):,1
if (begin_list[i] != 0) and (begin_list[j] % begin_list[i] == 0):,begin_list[j] = 0,1
"assert isinstance(ans, list), ""'ans' must been from type list""",return ans,3
def get_prime_numbers(n):,"assert isinstance(n, int) and (n > 2), ""'N' must been an int and > 2""",1
"assert isinstance(n, int) and (n > 2), ""'N' must been an int and > 2""",ans = [],1
"for number in range(2, n + 1):",if is_prime(number):,1
if is_prime(number):,ans.append(number),1
def prime_factorization(number):,"assert isinstance(number, int) and number >= 0, ""'number' must been an int and >= 0""",1
"assert isinstance(number, int) and number >= 0, ""'number' must been an int and >= 0""",ans = [],1
factor = 2,quotient = number,1
"if number in {0, 1}:",ans.append(number),1
ans.append(number),elif not is_prime(number):,1
elif not is_prime(number):,while quotient != 1:,1
while quotient != 1:,if is_prime(factor) and (quotient % factor == 0):,1
if is_prime(factor) and (quotient % factor == 0):,ans.append(factor),1
ans.append(factor),quotient /= factor,1
quotient /= factor,else:,1
else:,factor += 1,1
factor += 1,else:,1
else:,ans.append(number),1
def greatest_prime_factor(number):,"assert isinstance(number, int) and (number >= 0), (",1
"assert isinstance(number, int) and (number >= 0), (","""'number' must been an int and >= 0""",2
"""'number' must been an int and >= 0""",),2
ans = 0,prime_factors = prime_factorization(number),2
prime_factors = prime_factorization(number),ans = max(prime_factors),1
"assert isinstance(ans, int), ""'ans' must been from type int""",return ans,2
def smallest_prime_factor(number):,"assert isinstance(number, int) and (number >= 0), (",1
prime_factors = prime_factorization(number),ans = min(prime_factors),1
def is_even(number):,"assert isinstance(number, int), ""'number' must been an int""",1
"assert isinstance(number, int), ""'number' must been an int""","assert isinstance(number % 2 == 0, bool), ""compare must been from type bool""",1
def is_odd(number):,"assert isinstance(number, int), ""'number' must been an int""",1
"assert isinstance(number, int), ""'number' must been an int""","assert isinstance(number % 2 != 0, bool), ""compare must been from type bool""",1
def goldbach(number):,"assert isinstance(number, int) and (number > 2) and is_even(number), (",1
"assert isinstance(number, int) and (number > 2) and is_even(number), (","""'number' must been an int, even and > 2""",1
"""'number' must been an int, even and > 2""",),1
ans = [],prime_numbers = get_prime_numbers(number),1
prime_numbers = get_prime_numbers(number),len_pn = len(prime_numbers),1
i = 0,j = None,1
while i < len_pn and loop:,j = i + 1,1
while j < len_pn and loop:,if prime_numbers[i] + prime_numbers[j] == number:,1
if prime_numbers[i] + prime_numbers[j] == number:,loop = False,1
loop = False,ans.append(prime_numbers[i]),1
ans.append(prime_numbers[i]),ans.append(prime_numbers[j]),1
assert (,"isinstance(ans, list)",2
"isinstance(ans, list)",and (len(ans) == 2),1
and (len(ans) == 2),and (ans[0] + ans[1] == number),1
and (ans[0] + ans[1] == number),and is_prime(ans[0]),1
and is_prime(ans[0]),and is_prime(ans[1]),1
and is_prime(ans[1]),"), ""'ans' must contains two primes. And sum of elements must been eq 'number'""",1
"def kg_v(number1, number2):",assert (,1
assert (,"isinstance(number1, int)",1
"isinstance(number1, int)","and isinstance(number2, int)",1
"and isinstance(number2, int)",and (number1 >= 1),1
and (number1 >= 1),and (number2 >= 1),1
and (number2 >= 1),"), ""'number1' and 'number2' must been positive integer.""",1
prime_fac_1 = prime_factorization(number1),prime_fac_2 = prime_factorization(number2),1
elif number1 == 1 or number2 == 1:,prime_fac_1 = [],1
prime_fac_1 = [],prime_fac_2 = [],1
prime_fac_2 = [],"ans = max(number1, number2)",1
count1 = 0,count2 = 0,1
for n in prime_fac_1:,if n not in done:,1
if n not in done:,if n in prime_fac_2:,1
if n in prime_fac_2:,count1 = prime_fac_1.count(n),1
count1 = prime_fac_1.count(n),count2 = prime_fac_2.count(n),1
count2 = prime_fac_2.count(n),"for _ in range(max(count1, count2)):",1
"for _ in range(max(count1, count2)):",ans *= n,1
ans *= n,else:,1
else:,count1 = prime_fac_1.count(n),1
count1 = prime_fac_1.count(n),for _ in range(count1):,1
for _ in range(count1):,ans *= n,1
for n in prime_fac_2:,if n not in done:,1
if n not in done:,count2 = prime_fac_2.count(n),1
count2 = prime_fac_2.count(n),for _ in range(count2):,1
for _ in range(count2):,ans *= n,1
"assert isinstance(ans, int) and (ans >= 0), (","""'ans' must been from type int and positive""",1
"""'ans' must been from type int and positive""",),1
def get_prime(n):,"assert isinstance(n, int) and (n >= 0), ""'number' must been a positive int""",1
index = 0,ans = 2,1
while index < n:,index += 1,1
index += 1,ans += 1,1
while not is_prime(ans):,ans += 1,1
"assert isinstance(ans, int) and is_prime(ans), (","""'ans' must been a prime number and from type int""",1
"""'ans' must been a prime number and from type int""",),1
"def get_primes_between(p_number_1, p_number_2):",assert (,1
assert (,is_prime(p_number_1) and is_prime(p_number_2) and (p_number_1 < p_number_2),1
is_prime(p_number_1) and is_prime(p_number_2) and (p_number_1 < p_number_2),"), ""The arguments must been prime numbers and 'pNumber1' < 'pNumber2'""",1
number = p_number_1 + 1,ans = [],1
while not is_prime(number):,number += 1,2
while number < p_number_2:,ans.append(number),1
ans.append(number),number += 1,1
"isinstance(ans, list)",and ans[0] != p_number_1,1
and ans[0] != p_number_1,and ans[len(ans) - 1] != p_number_2,1
and ans[len(ans) - 1] != p_number_2,"), ""'ans' must been a list without the arguments""",1
def get_divisors(n):,"assert isinstance(n, int) and (n >= 1), ""'n' must been int and >= 1""",1
"assert isinstance(n, int) and (n >= 1), ""'n' must been int and >= 1""",ans = [],1
"for divisor in range(1, n + 1):",if n % divisor == 0:,1
if n % divisor == 0:,ans.append(divisor),1
ans.append(divisor),print(ans),1
"assert ans[0] == 1 and ans[len(ans) - 1] == n, ""Error in function getDivisiors(...)""",return ans,1
def is_perfect_number(number):,"assert isinstance(number, int) and (number > 1), (",1
"assert isinstance(number, int) and (number > 1), (","""'number' must been an int and >= 1""",1
"""'number' must been an int and >= 1""",),1
assert (,"isinstance(divisors, list)",1
"isinstance(divisors, list)",and (divisors[0] == 1),1
and (divisors[0] == 1),and (divisors[len(divisors) - 1] == number),1
and (divisors[len(divisors) - 1] == number),"), ""Error in help-function getDivisiors(...)""",1
"def simplify_fraction(numerator, denominator):",assert (,1
assert (,"isinstance(numerator, int)",1
"isinstance(numerator, int)","and isinstance(denominator, int)",1
"and isinstance(denominator, int)",and (denominator != 0),1
and (denominator != 0),"), ""The arguments must been from type int and 'denominator' != 0""",1
assert (,"isinstance(gcd_of_fraction, int)",1
"isinstance(gcd_of_fraction, int)",and (numerator % gcd_of_fraction == 0),1
and (numerator % gcd_of_fraction == 0),and (denominator % gcd_of_fraction == 0),1
and (denominator % gcd_of_fraction == 0),"), ""Error in function gcd_by_iterative(...,...)""",1
def factorial(n):,return 1 if n == 1 else n * factorial(n - 1),1
def fib(n: int) -> int:,"assert isinstance(n, int) and (n >= 0), ""'n' must been an int and >= 0""",1
tmp = 0,fib1 = 1,1
fib1 = 1,ans = 1,1
for _ in range(n - 1):,tmp = ans,1
tmp = ans,ans += fib1,1
ans += fib1,fib1 = tmp,1
"if __name__ == ""__main__"":",import doctest,1
